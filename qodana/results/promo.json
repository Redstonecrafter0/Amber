{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'keys' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "src/main/kotlin/net/redstonecraft/amber/utils/GLFWKeys.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 8,
      "length": 4,
      "code": {
        "startLine": 5,
        "length": 4,
        "offset": 27,
        "surroundingCode": "object GLFWKeys {\n\n    val keys = GLFW::class.java.declaredFields.filter { it.name.startsWith(\"GLFW_KEY_\") }.associate { it.name.removePrefix(\"GLFW_KEY_\") to it.getInt(null) } - \"UNKNOWN\" + (\"NONE\" to -1)\n    val keyNames = keys.map { (k, v) -> v to k }.toMap()\n"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3569816920570885030"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'keyNames' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "src/main/kotlin/net/redstonecraft/amber/utils/GLFWKeys.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 8,
      "length": 8,
      "code": {
        "startLine": 6,
        "length": 8,
        "offset": 195,
        "surroundingCode": "\n    val keys = GLFW::class.java.declaredFields.filter { it.name.startsWith(\"GLFW_KEY_\") }.associate { it.name.removePrefix(\"GLFW_KEY_\") to it.getInt(null) } - \"UNKNOWN\" + (\"NONE\" to -1)\n    val keyNames = keys.map { (k, v) -> v to k }.toMap()\n\n    operator fun get(name: String?): Int? = if (name == null) null else keys[name.uppercase()]"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4987173010850833156"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Function 'export' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/config/ConfigManager.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 8,
      "length": 6,
      "code": {
        "startLine": 52,
        "length": 6,
        "offset": 52,
        "surroundingCode": "     * Export the current config.\n     * */\n    fun export(): Config {\n        val config = Config(\n            currentConfig.name, currentConfig.description, currentConfig.version, currentConfig.authors, Category.categories.associate { category ->"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "-8242166635850359555"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'idRegex' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "src/main/kotlin/net/redstonecraft/amber/config/ConfigManager.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 8,
      "length": 7,
      "code": {
        "startLine": 18,
        "length": 7,
        "offset": 32,
        "surroundingCode": "object ConfigManager {\n\n    val idRegex = \"[0-9a-zA-Z-+._]+\".toRegex()\n    const val fileEnding = \".amber.json\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3341520171075962712"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Function 'validateId' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/config/ConfigManager.kt",
      "language": "kotlin",
      "line": 131,
      "offset": 8,
      "length": 10,
      "code": {
        "startLine": 129,
        "length": 10,
        "offset": 49,
        "surroundingCode": "     * Validates the given id.\n     * */\n    fun validateId(id: String): Boolean = id.matches(idRegex)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2799963174407925534"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'currentConfig' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "src/main/kotlin/net/redstonecraft/amber/config/ConfigManager.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 8,
      "length": 13,
      "code": {
        "startLine": 47,
        "length": 13,
        "offset": 50,
        "surroundingCode": "     * Gets the current config.\n     * */\n    var currentConfig = Config(\"Default\", \"The default configuration\", Amber.VERSION, mutableListOf(\"Redstonecrafter0\"), mutableMapOf())\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7352442950442125554"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Function 'validateFile' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/config/ConfigManager.kt",
      "language": "kotlin",
      "line": 136,
      "offset": 8,
      "length": 12,
      "code": {
        "startLine": 134,
        "length": 12,
        "offset": 58,
        "surroundingCode": "     * Validates the given config file.\n     * */\n    fun validateFile(file: File): Boolean {\n        if (file.name.endsWith(fileEnding) && validateId(file.name.removeSuffix(fileEnding)) && file.exists() && file.isFile) {\n            try {"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "-841387212133644824"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'dir' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "src/main/kotlin/net/redstonecraft/amber/config/ConfigManager.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 8,
      "length": 3,
      "code": {
        "startLine": 27,
        "length": 3,
        "offset": 15,
        "surroundingCode": "    }\n\n    val dir = Amber.dir.resolve(\"config\").apply { if (!exists() || !isDirectory) mkdirs() }\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "-1796308402241111535"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'fileEnding' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "src/main/kotlin/net/redstonecraft/amber/config/ConfigManager.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 14,
      "length": 10,
      "code": {
        "startLine": 19,
        "length": 10,
        "offset": 62,
        "surroundingCode": "\n    val idRegex = \"[0-9a-zA-Z-+._]+\".toRegex()\n    const val fileEnding = \".amber.json\"\n\n    private val json = Json {"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6850669522692966116"
}]}