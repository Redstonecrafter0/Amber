{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'keyNames' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "src/main/kotlin/net/redstonecraft/amber/utils/GLFWKeys.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 8,
      "length": 8,
      "code": {
        "startLine": 6,
        "length": 8,
        "offset": 195,
        "surroundingCode": "\n    val keys = GLFW::class.java.declaredFields.filter { it.name.startsWith(\"GLFW_KEY_\") }.associate { it.name.removePrefix(\"GLFW_KEY_\") to it.getInt(null) } - \"UNKNOWN\" + (\"NONE\" to -1)\n    val keyNames = keys.map { (k, v) -> v to k }.toMap()\n\n    operator fun get(name: String?): Int? = if (name == null) null else keys[name.uppercase()]"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4987173010850833156"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'keys' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "src/main/kotlin/net/redstonecraft/amber/utils/GLFWKeys.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 8,
      "length": 4,
      "code": {
        "startLine": 5,
        "length": 4,
        "offset": 27,
        "surroundingCode": "object GLFWKeys {\n\n    val keys = GLFW::class.java.declaredFields.filter { it.name.startsWith(\"GLFW_KEY_\") }.associate { it.name.removePrefix(\"GLFW_KEY_\") to it.getInt(null) } - \"UNKNOWN\" + (\"NONE\" to -1)\n    val keyNames = keys.map { (k, v) -> v to k }.toMap()\n"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3569816920570885030"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'text' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/renderer/widgets/TextWidget.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 8,
      "length": 4,
      "code": {
        "startLine": 11,
        "length": 4,
        "offset": 71,
        "surroundingCode": "    override var width: Float,\n    override var height: Float,\n    var text: String,\n    var color: Color = Color.WHITE,\n    override var background: Background? = null,"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2511982049977112921"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'color' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/renderer/widgets/TextWidget.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 8,
      "length": 5,
      "code": {
        "startLine": 12,
        "length": 5,
        "offset": 62,
        "surroundingCode": "    override var height: Float,\n    var text: String,\n    var color: Color = Color.WHITE,\n    override var background: Background? = null,\n    override val parent: Widget? = null"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6965492813046719849"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"throwable\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/events/Events.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 25,
      "length": 9,
      "code": {
        "startLine": 28,
        "length": 9,
        "offset": 79,
        "surroundingCode": "class ConfigPostSaveEvent(val config: Config): Event\n\nclass ExceptionEvent(val throwable: Throwable): Event\n\nopen class ModuleEvent(val module: BaseModule): Event"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-7392623599453076399"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"config\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/events/Events.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 30,
      "length": 6,
      "code": {
        "startLine": 20,
        "length": 6,
        "offset": 33,
        "surroundingCode": "}\n\nclass ConfigPostLoadEvent(val config: Config): Event\n\nclass ConfigPreSaveEvent(var config: Config): CancellableEvent {"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2710591549962864404"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"scancode\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/events/Events.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 41,
      "length": 8,
      "code": {
        "startLine": 36,
        "length": 8,
        "offset": 114,
        "surroundingCode": "class ModuleDisableEvent(module: BaseModule): ModuleToggleEvent(module)\n\nclass KeyboardKeyEvent(val key: Int, val scancode: Int, val action: Int, val modifiers: Int): Event\nclass MousePressEvent(val button: Int, val action: Int, val mods: Int): Event\n"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-4224005078838342317"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"modifiers\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/events/Events.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 77,
      "length": 9,
      "code": {
        "startLine": 36,
        "length": 9,
        "offset": 150,
        "surroundingCode": "class ModuleDisableEvent(module: BaseModule): ModuleToggleEvent(module)\n\nclass KeyboardKeyEvent(val key: Int, val scancode: Int, val action: Int, val modifiers: Int): Event\nclass MousePressEvent(val button: Int, val action: Int, val mods: Int): Event\n"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5808356912298254309"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"config\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/events/Events.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 30,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 33,
        "surroundingCode": "}\n\nclass ConfigPostSaveEvent(val config: Config): Event\n\nclass ExceptionEvent(val throwable: Throwable): Event"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "805797380784889845"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"button\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/events/Events.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 26,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 127,
        "surroundingCode": "\nclass KeyboardKeyEvent(val key: Int, val scancode: Int, val action: Int, val modifiers: Int): Event\nclass MousePressEvent(val button: Int, val action: Int, val mods: Int): Event\n\nclass TickEvent: Event"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-6887790894711758367"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"action\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/events/Events.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 43,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 144,
        "surroundingCode": "\nclass KeyboardKeyEvent(val key: Int, val scancode: Int, val action: Int, val modifiers: Int): Event\nclass MousePressEvent(val button: Int, val action: Int, val mods: Int): Event\n\nclass TickEvent: Event"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-8430789250900366067"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"mods\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/events/Events.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 60,
      "length": 4,
      "code": {
        "startLine": 37,
        "length": 4,
        "offset": 161,
        "surroundingCode": "\nclass KeyboardKeyEvent(val key: Int, val scancode: Int, val action: Int, val modifiers: Int): Event\nclass MousePressEvent(val button: Int, val action: Int, val mods: Int): Event\n\nclass TickEvent: Event"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "418727756846455945"
}]}