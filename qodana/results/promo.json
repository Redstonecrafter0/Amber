{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Function 'disable' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/net/redstonecraft/amber/base/module/AmberModule.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 56,
        "length": 7,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun disable() {\n        if (isEnabled) {\n            isEnabled = false"
      }
    }
  ],
  "attributes": {
    "module": "amber.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "25086e6fe04600f43103c43125256a6dbd2d62b312d18f68e3433b304afd579d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'isEnabled' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/net/redstonecraft/amber/base/module/AmberModule.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 34,
        "length": 9,
        "offset": 65,
        "surroundingCode": ") : AmberModule(mod, id, name, category, description) {\n\n    var isEnabled: Boolean = false\n        private set\n"
      }
    }
  ],
  "attributes": {
    "module": "amber.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "d54f12b485a85065ed5ab4c9e0e105fe8afac3a4bf5d4b893c53647b8614ca46"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Function 'enable' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/net/redstonecraft/amber/base/module/AmberModule.kt",
      "language": "kotlin",
      "line": 51,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 49,
        "length": 6,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun enable() {\n        if (!isEnabled) {\n            isEnabled = true"
      }
    }
  ],
  "attributes": {
    "module": "amber.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e64f6d26767d7bd9d5cfdcff5573ab0323eaaa2621f4cec9c4d5cc8fce840b7d"
}]}