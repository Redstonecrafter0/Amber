{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'text' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/renderer/widgets/TextWidget.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 8,
      "length": 4,
      "code": {
        "startLine": 11,
        "length": 4,
        "offset": 71,
        "surroundingCode": "    override var width: Float,\n    override var height: Float,\n    var text: String,\n    var color: Color = Color.WHITE,\n    override var background: Background? = null,"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2511982049977112921"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'color' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/renderer/widgets/TextWidget.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 8,
      "length": 5,
      "code": {
        "startLine": 12,
        "length": 5,
        "offset": 62,
        "surroundingCode": "    override var height: Float,\n    var text: String,\n    var color: Color = Color.WHITE,\n    override var background: Background? = null,\n    override val parent: Widget? = null"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6965492813046719849"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"availableIds\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/config/ConfigManager.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 8,
      "length": 12,
      "code": {
        "startLine": 32,
        "length": 12,
        "offset": 69,
        "surroundingCode": "     * Gets the configs from the config directory.\n     * */\n    val availableIds: List<String>\n        get() = dir.list { _, it -> it.endsWith(fileEnding) }!!.filter { validateFile(dir.resolve(it)) }.map { it.removeSuffix(fileEnding) }\n"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3720137951115130834"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Function \"text\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/kotlin/net/redstonecraft/amber/renderer/widgets/TextWidget.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 27,
        "length": 4,
        "offset": 20,
        "surroundingCode": "}\n\nfun ScreenConfig.text(text: String, x: Float, y: Float, width: Float, height: Float, color: Color = Color.WHITE, background: Background? = null) {\n    rootWidget += TextWidget(x, y, width, height, text, color, background, rootWidget)\n}"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7540975516979607233"
}]}